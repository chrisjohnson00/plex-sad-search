name: 'CI'

on:
  push:
    branches:
      - '**'
    tags:
      - '**'

jobs:
  lint:
    name: 'Lint'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: 'actions/checkout@v3'
      - uses: 'actions/setup-python@v4'
        with:
          python-version: '3.11'
      - name: 'Install dependencies'
        run: |
          echo "Installing CI requirements"
          pip install --upgrade --user pip flake8
          echo "Installing project requirements"
          pip install -r requirements.txt
      - name: 'Flake8 :allthethings:'
        run: 'python -m flake8 --max-line-length 120'
  #  test:
  #    name: 'Test'
  #    runs-on: 'ubuntu-latest'
  #    steps:
  #      - uses: 'actions/checkout@v3'
  #      - uses: 'actions/setup-python@v4'
  #        with:
  #          python-version: '3.11'
  #      - name: 'Install dependencies'
  #        run: |
  #          echo "Installing CI requirements"
  #          pip install --upgrade --user pip pytest coverage pyfakefs
  #          echo "Installing project requirements"
  #          pip install -r requirements.txt
  #      - name: 'Run tests'
  #        run: 'python -m coverage run --branch -m pytest'
  #      - name: 'Display coverage report'
  #        run: |
  #          python -m coverage report --fail-under=80 \
  #          --omit="*/.local/*","*/tests/test_*" -m
  container_build:
    name: 'Build and Push Docker Container'
    runs-on: 'ubuntu-latest'
    #    needs: ['lint', 'test']
    needs:
      - 'lint'
    steps:
      - uses: 'actions/checkout@v3'
      - name: 'Get calculated next version based on commit history'
        id: 'calculated-next-version'
        uses: 'mathieudutour/github-tag-action@v6.1'
        with:
          github_token: '${{ secrets.GITHUB_TOKEN }}'
          release_branches: 'main'
          default_bump: 'patch'
          dry_run: 'true'
          append_to_pre_release_tag: 'rc-${{ github.run_id }}'
          pre_release_branches: '^((main(?!$)).+|(?!main).+)$'
      - name: 'Prepare'
        id: 'prep'
        run: |
          DOCKER_IMAGE=${{ github.repository }}
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          if [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=${GITHUB_REF#refs/heads/}
            if [[ $VERSION == main ]]; then
              VERSION=latest
            else
              VERSION=${{ steps.calculated-next-version.outputs.new_tag }}
            fi
          fi
          PUSH=true
          if [[ $GITHUB_REF == refs/heads/dependabot* ]]; then
            echo "Dependabot branch"
            PUSH=false
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION//\//-}"
          echo "tags=${TAGS}" >> $GITHUB_OUTPUT
          echo "version=${VERSION//\//-}" >> $GITHUB_OUTPUT
          echo "push=${PUSH}" >> $GITHUB_OUTPUT
      - name: 'Setup Docker Buildx'
        uses: 'docker/setup-buildx-action@v3'
      - name: 'Cache Docker layers'
        uses: 'actions/cache@v3.3.1'
        with:
          path: '/tmp/.buildx-cache'
          key: '${{ runner.os }}-buildx-${{ steps.prep.outputs.version }}'
          restore-keys: |
            ${{ runner.os }}-buildx-
            ${{ runner.os }}-buildx-${{ steps.prep.outputs.version }}
      - name: 'Login to DockerHub'
        uses: 'docker/login-action@v3'
        with:
          username: 'chrisjohnson00'
          password: '${{ secrets.DOCKER_HUB_PASSWORD }}'
      - name: 'Build and push'
        id: 'docker_build'
        uses: 'docker/build-push-action@v5'
        with:
          context: '.'
          file: './Dockerfile'
          # ensure latest base image is used
          pull: 'true'
          # publish
          push: '${{ steps.prep.outputs.push }}'
          # tags determined by prep step
          tags: '${{ steps.prep.outputs.tags }}'
          cache-from: 'type=local,src=/tmp/.buildx-cache'
          cache-to: 'type=local,dest=/tmp/.buildx-cache'
          labels: |
            org.opencontainers.image.documentation=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
  actionslint:
    name: 'Actions Yaml Lint'
    runs-on: 'ubuntu-latest'
    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write
    env:
      VALIDATE_YAML: true
      VALIDATE_GITHUB_ACTIONS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Super-linter
        uses: super-linter/super-linter/slim@v5.7.2  # x-release-please-version
        env:
          DEFAULT_BRANCH: main
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
